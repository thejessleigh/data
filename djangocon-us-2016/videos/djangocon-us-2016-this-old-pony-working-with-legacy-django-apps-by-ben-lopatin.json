{
  "description": "Legacy software is software that already exists. It may be a project you've inherited after joining a team, a new client's application, or something you wrote last year, or last month. Most software developers seem to prefer \"greenfield\" development, where you get to start from a clean slate. The reality is that there's a lot of \"brownfield\" development out there, that it rarely makes sense to throw away working software, and we can control the experience quite a bit to make our lives, and the software, better. If you haven't worked with legacy software chances are pretty good you will.\n\nWe'll first walk through what \"legacy\" means, and what this looks like specifically for Django developers and Django projects. We'll also cover some of the scenarios in which you may find yourself working with legacy codebases. This includes the types of issues you'll be presented with, both generally and specific to Django.\n\nWhat do we mean by legacy code?\nWhat does a legacy Django project look like?\nWhat kinds of issues will you need to deal with?\nHow to approach the codebase\nTools for working with your new legacy codebase\nIntroducing or fixing tests\nCommon issues to look for and how to solve them\nLegacy deployment processes and other scary nightmares\nMore features! Balancing business needs and \"perfect\" code\nDeciding when to upgrade Django and other dependency versions, and how to do this",
  "duration": 1857,
  "language": "eng",
  "recorded": "2016-07-20",
  "speakers": [
    "Ben Lopatin"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/16x6AOmSOFQ/hqdefault.jpg",
  "title": "This Old Pony: Working With Legacy Django Apps",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=16x6AOmSOFQ"
    }
  ]
}
